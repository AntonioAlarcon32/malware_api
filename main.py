from flask import Flask, jsonify, request, send_from_directory
from flask_socketio import SocketIO

app = Flask(__name__)
socketio = SocketIO(app)

# Initialize counters
endpoint1_counter = 0
endpoint2_counter = 0

# Initialize a dictionary to store request counts for each IP
ip_counts = {}

def update_counters():
    socketio.emit('counter_update', {
        'endpoint1_count': endpoint1_counter,
        'endpoint2_count': endpoint2_counter,
        'ip_counts': ip_counts
    })


def record_request(endpoint, client_ip):
    new_ip = False
    if client_ip not in ip_counts:
        new_ip = True
        ip_counts[client_ip] = {'endpoint1': 0, 'endpoint2': 0}

    ip_counts[client_ip][endpoint] += 1

    if new_ip:
        # Emit an event for the new IP connection
        socketio.emit('new_ip_connection', {'ip': client_ip})

    update_counters()


@app.route('/get-file/<filename>')
def get_file(filename):
    directory = "files"  # Directory where the file is located
    return send_from_directory(directory, filename, as_attachment=True)


@app.route('/counters', methods=['GET'])
def counters():
    return jsonify({
        "endpoint1_count": endpoint1_counter,
        "endpoint2_count": endpoint2_counter,
        "ip_counts": ip_counts
    })


@app.route('/endpoint1', methods=['GET'])
def endpoint1():
    global endpoint1_counter
    client_ip = request.remote_addr
    endpoint1_counter += 1
    record_request('endpoint1', client_ip)
    socketio.emit('reset_timer', {'ip': client_ip})
    return jsonify({"message": "Endpoint 1 was called", "count": endpoint1_counter})


@app.route('/endpoint2', methods=['GET'])
def endpoint2():
    global endpoint2_counter
    client_ip = request.remote_addr
    endpoint2_counter += 1
    record_request('endpoint2', client_ip)
    return jsonify({"message": "Endpoint 2 was called", "count": endpoint2_counter})


@socketio.on('request_update')
def handle_request_update():
    # You can perform any necessary actions here and then emit the update
    update_counters()


@socketio.on('request_all_ips')
def handle_request_all_ips():
    # Emit an event with the current list of connected IPs
    socketio.emit('all_ips', {'ip_counts': ip_counts})


if __name__ == "__main__":
    socketio.run(app, debug=True, host="0.0.0.0", port=3000, allow_unsafe_werkzeug=True)
